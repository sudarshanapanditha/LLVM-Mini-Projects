extern "C" {
#include "clang-c/Index.h"
}
#include "llvm/Support/CommandLine.h"
#include <iostream>
#include <string>

using namespace llvm;

/* Test Code Begin */

class Diagnoser {
public:
  Diagnoser(const char *);

  void report();
private:
  const char *m_args[2] = {
    "-I/usr/include",
    "-I."
  };
  std::string m_file_name;
  CXIndex m_index;
  CXTranslationUnit m_translation_unit;
 
};

/* Implementation */
Diagnoser::Diagnoser(const char * fileName): m_file_name{fileName}{
  
}

void Diagnoser::report() {
  m_index = clang_createIndex(0,0);
  m_translation_unit = clang_parseTranslationUnit
    (index, m_file_name.c_str(), m_args, 2, NULL, 0, CXTranslationUnit_None);

  unsigned diagnosticCount = clang_getNumDiagnostics(m_translation_unit);
  for(unsigned i = 0; i < diagnosticCount; ++i){
    CXDiagnostic diagnostic = clang_getDiagnostic( m_translation_unit, i);
    CXString category = clang_getDiagnosticCategoryText(diagnostic);
    CXString message = clang_getDiagnosticSpelling(diagnostic);
    unsigned severity = clang_getDiagnosticSeverity(diagnostic);
    CXSourceLocation loc = clang_getDiagnosticLocation(diagnostic);
    CXString fName;
    unsigned line = 0, col = 0;
    clang_getPresumedLocation(loc, &fName, &line, &col);
    std::cout << "Severity: " << severity << " File: "
	      << clang_getCString(fName) << " Line: "
	      << line << " Col: " << col << " Category: \""
	      << clang_getCString(category) << "\" Message: "
	      << clang_getCString(message) << std::endl;
    clang_disposeString(fName);
    clang_disposeString(message);
    clang_disposeString(category);
    clang_disposeDiagnostic(diagnostic);
  }
  clang_disposeTranslationUnit( m_translation_unit);
  clang_disposeIndex(m_index);
}

/* Test Code End */

static cl::opt<std::string> FileName(cl::Positional, cl::desc("Bitcode file"), cl::Required);

int main(int argc, char** argv){
  cl::ParseCommandLineOptions(argc, argv, "Diagnostic tool\n");
  /*CXIndex index = clang_createIndex(0,0);
  const char *args[] = {
    "-I/usr/include",
    "-I."
  };
  CXTranslationUnit translationUnit = clang_parseTranslationUnit
    (index, FileName.c_str(), args, 2, NULL, 0, CXTranslationUnit_None);
  unsigned diagnosticCount = clang_getNumDiagnostics(translationUnit);
  for(unsigned i = 0; i < diagnosticCount; ++i){
    CXDiagnostic diagnostic = clang_getDiagnostic(translationUnit, i);
    CXString category = clang_getDiagnosticCategoryText(diagnostic);
    CXString message = clang_getDiagnosticSpelling(diagnostic);
    unsigned severity = clang_getDiagnosticSeverity(diagnostic);
    CXSourceLocation loc = clang_getDiagnosticLocation(diagnostic);
    CXString fName;
    unsigned line = 0, col = 0;
    clang_getPresumedLocation(loc, &fName, &line, &col);
    std::cout << "Severity: " << severity << " File: "
	      << clang_getCString(fName) << " Line: "
	      << line << " Col: " << col << " Category: \""
	      << clang_getCString(category) << "\" Message: "
	      << clang_getCString(message) << std::endl;
    clang_disposeString(fName);
    clang_disposeString(message);
    clang_disposeString(category);
    clang_disposeDiagnostic(diagnostic);
  }
  clang_disposeTranslationUnit(translationUnit);
  clang_disposeIndex(index);*/

  Diagnoser diagnoser{FileName.c_str()};
  diagnoser.report();
  return 0;
}
